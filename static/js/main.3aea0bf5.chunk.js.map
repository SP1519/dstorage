{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","type","name","console","log","state","uploadFile","description","add","error","loading","dstorage","methods","hash","size","send","from","account","on","reload","e","alert","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","DStorage","networks","Contract","abi","address","filesCount","fileCount","call","i","id","className","Component","Navbar","href","rel","src","box","width","height","alt","substring","Identicon","toString","module","exports","Main","role","style","maxWidth","onSubmit","fileDescription","value","ref","input","placeholder","required","onChange","maxHeight"],"mappings":"uKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,us7FE1HbC,G,OADaC,EAAS,IACfC,CAAW,CAACC,KAAK,iBAAkBC,KAAK,KAAMC,SAAU,WAE/Dd,E,kDA+HJ,WAAYe,GAAQ,IAAD,8BACjB,cAAMA,IA9DRC,YAAc,SAAAC,GACZA,EAAMC,iBAEN,IAAMC,EAAMF,EAAMG,OAAOC,MAAM,GACzBC,EAAS,IAAI5B,OAAO6B,WAE1BD,EAAOE,kBAAmBL,GAC1BG,EAAOG,UAAY,WACjB,EAAKC,SAAS,CACZC,OAAQC,EAAON,EAAOO,QACtBC,KAAMX,EAAKW,KACXC,KAAMZ,EAAKY,OAEbC,QAAQC,IAAI,SAAU,EAAKC,MAAMP,UAgDlB,EA1CnBQ,WAAa,SAAAC,GACXJ,QAAQC,IAAI,wBAEZxB,EAAK4B,IAAI,EAAKH,MAAMP,QAAQ,SAACW,EAAMT,GACjCG,QAAQC,IAAI,cAAeJ,GAEvBS,EACFN,QAAQM,MAAMA,IAIhB,EAAKZ,SAAS,CAACa,SAAQ,IAEC,KAApB,EAAKL,MAAMJ,MACb,EAAKJ,SAAS,CAACI,KAAM,SAEvB,EAAKI,MAAMM,SAASC,QAAQN,WAAWN,EAAO,GAAGa,KAAMb,EAAO,GAAGc,KAAM,EAAKT,MAAMJ,KAAM,EAAKI,MAAMH,KAAMK,GAAaQ,KAAK,CAACC,KAAM,EAAKX,MAAMY,UAAUC,GAAG,mBAAmB,SAACL,GAC5K,EAAKhB,SAAS,CACZa,SAAQ,EACRT,KAAK,KACLC,KAAK,OAETrC,OAAOC,SAASqD,YACfD,GAAG,SAAS,SAACE,GACdvD,OAAOwD,MAAM,SACb,EAAKxB,SAAS,CAACa,SAAQ,YAmBzB,EAAKL,MAAQ,CACXY,QAAQ,GACRN,SAAS,KACTnB,MAAM,GACNkB,SAAS,EACTT,KAAM,KACNC,KAAM,MARS,E,2LA5HXoB,KAAKC,W,uBACLD,KAAKE,qB,qPAIR3D,OAAO4D,S,uBACR5D,OAAO6D,KAAO,IAAIC,IAAK9D,OAAO4D,U,SACxB5D,OAAO4D,SAASG,S,6BAEf/D,OAAO6D,KACd7D,OAAO6D,KAAO,IAAIC,IAAK9D,OAAO6D,KAAKG,iBAGnChE,OAAOwD,MAAM,6D,iRAOTK,EAAO7D,OAAO6D,KACpBvB,QAAQC,IAAIsB,G,SAGWA,EAAKI,IAAIC,c,cAA1BC,E,OACNV,KAAKzB,SAAS,CAACoB,QAASe,EAAS,K,SAKTN,EAAKI,IAAIG,IAAIC,Q,UAA/BC,E,SACAC,EAAcC,EAASC,SAASH,I,wBAG9BxB,EAAW,IAAIe,EAAKI,IAAIS,SAASF,EAASG,IAAKJ,EAAYK,SACjEnB,KAAKzB,SAAS,CAAC6C,e,UAEU/B,EAASC,QAAQ+B,YAAYC,O,QAAhDF,E,OACNpB,KAAKzB,SAAS,CAAC6C,eAEPG,EAAIH,E,aAAYG,GAAG,G,kCACNlC,EAASC,QAAQpB,MAAMqD,GAAGD,O,QAAvCtD,E,OACNgC,KAAKzB,SAAS,CACZL,MAAM,GAAD,mBAAK8B,KAAKjB,MAAMb,OAAhB,CAAuBF,M,QAHHuD,I,gDAO7BhF,OAAOwD,MAAM,uD,uJA4Ff,OACE,6BACE,kBAAC,IAAD,CAAQJ,QAASK,KAAKjB,MAAMY,UAC1BK,KAAKjB,MAAMK,QACT,yBAAKoC,GAAG,SAASC,UAAU,oBAAmB,0CAC9C,kBAAC,IAAD,CACEvD,MAAO8B,KAAKjB,MAAMb,MAClBL,YAAamC,KAAKnC,YAClBmB,WAAYgB,KAAKhB,kB,GAtJb0C,aA8JH7E,Q,gJCrKT8E,E,uKAGF,OACE,yBAAKF,UAAU,iDACb,uBACEA,UAAU,sCACVG,KAAK,yCACL3D,OAAO,SACP4D,IAAI,uBAEJ,yBAAKC,IAAKC,IAAKC,MAAM,KAAKC,OAAO,KAAKR,UAAU,YAAYS,IAAI,KANlE,YASQ,wBAAIT,UAAU,mBACpB,4BACE,2BAAOD,GAAG,WACR,uBAAGvD,OAAO,SACPiE,IAAI,GACJT,UAAU,aACVI,IAAI,sBACJD,KAAM,gCAAkC5B,KAAKpC,MAAM+B,SACnDK,KAAKpC,MAAM+B,QAAUK,KAAKpC,MAAM+B,QAAQwC,UAAU,EAAE,GAAI,MAL3D,MAKqEnC,KAAKpC,MAAM+B,QAAUK,KAAKpC,MAAM+B,QAAQwC,UAAU,GAAG,IAAK,QAG/HnC,KAAKpC,MAAM+B,QACT,yBACEuC,IAAI,GACJT,UAAU,OACVO,MAAM,KACNC,OAAO,KACPH,IAAG,gCAA2B,IAAIM,IAAUpC,KAAKpC,MAAM+B,QAAS,IAAI0C,cAEtE,sC,GAjCKX,aA0CNC,O,oBC9CfW,EAAOC,QAAU,IAA0B,iC,+FCIrCC,E,uKAEM,IAAD,OACP,OACE,yBAAKf,UAAU,oCACb,yBAAKA,UAAU,OACb,0BAAMgB,KAAK,OAAOhB,UAAU,4BAA4BiB,MAAO,CAAEC,SAAU,WACzE,yBAAKlB,UAAU,WACb,mCAGA,yBAAKA,UAAU,4BAA4BiB,MAAO,CAAEC,SAAU,UAC5D,wBAAIlB,UAAU,qCAAoC,2BAAG,6CACnD,0BAAMmB,SAAU,SAAC9E,GACfA,EAAMC,iBACN,IAAMkB,EAAc,EAAK4D,gBAAgBC,MACzC,EAAKlF,MAAMoB,WAAWC,KAEpB,yBAAKwC,UAAU,cACb,6BACE,2BACED,GAAG,kBACH7C,KAAK,OACLoE,IAAK,SAACC,GAAY,EAAKH,gBAAkBG,GACzCvB,UAAU,8BACVwB,YAAY,iBACZC,UAAQ,KAEhB,2BAAOvE,KAAK,OAAOwE,SAAUnD,KAAKpC,MAAMC,YAAa4D,UAAU,8BAC/D,4BAAQ9C,KAAK,SAAS8C,UAAU,yBAAwB,yCAI9D,mCAEA,2BAAOA,UAAU,yCAAyCiB,MAAO,CAAEV,MAAO,SAAUoB,UAAW,mB,GAnC1F1B,aA+CJc,O","file":"static/js/main.3aea0bf5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import DStorage from '../abis/DStorage.json'\r\nimport React, { Component } from 'react';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\n//Declare IPFS\r\nconst ipfsClient = require (\"ipfs-http-client\")\r\nconst ipfs = ipfsClient({host:\"ipfs.infura.io\", port:5001, protocol: \"https\"})\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if(window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else{\r\n      window.alert('Non-Ethereum browser. You should consider trying MetaMask')\r\n    }\r\n  }\r\n\r\n\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    console.log(web3)\r\n\r\n    //Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({account: accounts[0]})\r\n    //console.log(accounts)\r\n\r\n//create javascript version \r\n    //Get Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = DStorage.networks[networkId]\r\n\r\n    if (networkData){\r\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\r\n      this.setState({filesCount})\r\n\r\n      const filesCount = await dstorage.methods.fileCount().call()\r\n      this.setState({filesCount})\r\n\r\n      for(var i = filesCount; i>=1;i--) {\r\n        const file = await dstorage.methods.files(i).call()\r\n        this.setState({\r\n          files:[...this.state.files, file]\r\n        })\r\n      }\r\n    } else {\r\n      window.alert('DStorage contract not deployed to detected network.')\r\n    }\r\n\r\n    //IF got connection, get data from contracts\r\n      //Assign contract\r\n\r\n      //Get files amount\r\n\r\n      //Load files&sort by the newest\r\n\r\n    //Else\r\n      //alert Error\r\n\r\n  }\r\n\r\n  // Get file from user\r\n  captureFile = event => {\r\n    event.preventDefault()\r\n\r\n    const file= event.target.files[0]\r\n    const reader = new window.FileReader()\r\n\r\n    reader.readAsArrayBuffer (file)\r\n    reader.onloadend = () =>{\r\n      this.setState({\r\n        buffer: Buffer(reader.result),\r\n        type: file.type,\r\n        name: file.name\r\n      })\r\n      console.log(\"buffer\", this.state.buffer)\r\n    }\r\n  }\r\n\r\n\r\n  //Upload File\r\n  uploadFile = description => {\r\n    console.log(\"Sending file to IPFS\")\r\n    //Add file to the IPFS\r\n    ipfs.add(this.state.buffer, (error,result)=>{\r\n      console.log(\"IPFS result\", result) //result?\r\n\r\n      if (error){\r\n        console.error(error)\r\n        return\r\n      }\r\n\r\n      this.setState({loading:true})\r\n      \r\n      if (this.state.type === \"\")\r\n        this.setState({type: \"none\"})\r\n\r\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({from: this.state.account}).on(\"transactionHash\", (hash)=>{\r\n        this.setState({\r\n          loading:false,\r\n          type:null,\r\n          name:null\r\n        })\r\n      window.location.reload()\r\n    }).on(\"error\", (e) =>{\r\n      window.alert(\"Error\")\r\n      this.setState({loading:false})\r\n      })\r\n    })//1:06:00\r\n\r\n\r\n      //Check If error\r\n        //Return error\r\n\r\n      //Set state to loading\r\n\r\n      //Assign value for the file without extension\r\n\r\n      //Call smart contract uploadFile function \r\n\r\n  }\r\n\r\n  //Set states\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account:\"\",\r\n      dstorage:null,\r\n      files:[],\r\n      loading: false,\r\n      type: null,\r\n      name: null\r\n    }\r\n\r\n    //Bind functions\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              files={this.state.files}\r\n              captureFile={this.captureFile}\r\n              uploadFile={this.uploadFile}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport box from '../box.png'\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.dappuniversity.com/bootcamp\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\r\n          D$t0r@g3\r\n        </a>\r\n                <ul className=\"navbar-nav px-3\">\r\n          <li>\r\n            <small id=\"account\">\r\n              <a target=\"_blank\"\r\n                 alt=\"\"\r\n                 className=\"text-white\"\r\n                 rel=\"noopener noreferrer\"\r\n                 href={\"https://etherscan.io/address/\" + this.props.account}>\r\n                {this.props.account ? this.props.account.substring(0,6): \"0x0\"}...{this.props.account ? this.props.account.substring(38,42): \"0x0\"}\r\n              </a>\r\n            </small>\r\n            { this.props.account\r\n              ? <img\r\n                  alt=\"\"\r\n                  className='ml-2'\r\n                  width='30'\r\n                  height='30'\r\n                  src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n                />\r\n              : <span></span>\r\n            }\r\n            </li>\r\n            </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","import React, { Component } from 'react';\r\nimport { convertBytes } from './helpers';\r\nimport moment from 'moment'\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5 text-center\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\r\n            <div className=\"content\">\r\n              <p>&nbsp;</p>\r\n\r\n           \r\n              <div className=\"card mb-3 mx-auto bg-dark\" style={{ maxWidth: '512px' }}>\r\n                <h2 className=\"text-white text-monospace bg-dark\"><b><ins>Share File</ins></b></h2>\r\n                  <form onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    const description = this.fileDescription.value\r\n                    this.props.uploadFile(description)\r\n                  }} >\r\n                      <div className=\"form-group\">\r\n                        <br></br>\r\n                          <input\r\n                            id=\"fileDescription\"\r\n                            type=\"text\"\r\n                            ref={(input) => { this.fileDescription = input }}\r\n                            className=\"form-control text-monospace\"\r\n                            placeholder=\"description...\"\r\n                            required />\r\n                      </div>\r\n                    <input type=\"file\" onChange={this.props.captureFile} className=\"text-white text-monospace\"/>\r\n                    <button type=\"submit\" className=\"btn-primary btn-block\"><b>Upload!</b></button>\r\n                  </form>\r\n              </div>\r\n\r\n              <p>&nbsp;</p>\r\n              {/* Create Table*/}\r\n              <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px'}}>\r\n              {/* Set table columns */}\r\n                {/* Mapping rows... */}\r\n              </table>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n\r\n// prepare file for upload - convert file to buffer (capturefile)\r\n//upload ipfs"],"sourceRoot":""}